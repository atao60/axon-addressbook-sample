<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2010. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
           xmlns:mx="library://ns.adobe.com/flex/mx"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns:sf="http://www.spicefactory.org/parsley/flex"
           xmlns:views="org.axonframework.examples.addressbook.views.*"
           enterState="''"
        >

    <fx:Script><![CDATA[
        import mx.controls.Alert;
        import mx.core.IFlexDisplayObject;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import spark.components.TitleWindow;

        import org.axonframework.examples.addressbook.messages.command.RemoveAddressCommandMessage;
        import org.axonframework.examples.addressbook.messages.command.RemoveContactCommandMessage;
        import org.axonframework.examples.addressbook.messages.command.SelectContactCommandMessage;
        import org.axonframework.examples.addressbook.model.Address;
        import org.axonframework.examples.addressbook.model.Contact;
        import org.axonframework.examples.addressbook.model.ContactModel;
        import org.spicefactory.parsley.core.context.Context;

        [Inject]
        [Bindable]
        public var contactModel:ContactModel;

        [MessageDispatcher]
        public var dispatcher:Function;

        [Inject]
        public var context:Context;

        public function addAddressPopupAction():void {
            createPopup(new AddAddressPopupView());
        }

        public function updateAddressPopupAction():void {
            var popup:AddAddressPopupView = new AddAddressPopupView();
            popup.address = addressDetailsGrid.selectedItem as Address;
            createPopup(popup);
        }

        public function removeAddressPopupAction():void {
            var address:Address = addressDetailsGrid.selectedItem as Address;
            var contact:Contact = contactModel.selectedContact;
            Alert.show(
                    "Do you want to delete the '" + address.type + ' address for ' + contact.name,
                    "Remove address",
                    Alert.YES | Alert.NO,
                    this,
                    removeAddressHandler);
        }

        public function removeAddressHandler(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                var address:Address = addressDetailsGrid.selectedItem as Address;
                var contact:Contact = contactModel.selectedContact;
                dispatcher(new RemoveAddressCommandMessage(address, contact));
            }
        }

        public function removeContactPopupAction():void {
            var contact:Contact = contactModel.selectedContact;
            Alert.show(
                    "Do you want to remove the contact " + contact.name,
                    "Remove contact",
                    Alert.YES | Alert.NO,
                    this,
                    removeContactHandler);
        }

        public function removeContactHandler(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                var contact:Contact = contactModel.selectedContact;
                dispatcher(new RemoveContactCommandMessage(contact));
                currentState = '';
            }
        }

        public function addContactPopupAction():void {
            contactModel.selectedContact = null;
            createPopup(new AddContactPopup());
        }

        public function changeContactPopupAction():void {
            createPopup(new AddContactPopup());
        }

        private function showContactDetails(event:ListEvent):void {
            dispatcher(new SelectContactCommandMessage(event.currentTarget.selectedItem as Contact));
            currentState = 'detail';
        }

        private function createPopup(win:TitleWindow):void {
            context.viewManager.addViewRoot(win);
            PopUpManager.addPopUp(win, this, true);
            PopUpManager.centerPopUp(win as IFlexDisplayObject);
        }
        ]]></fx:Script>

<fx:Declarations>
    <sf:Configure/>
</fx:Declarations>
    
    <mx:states>
        <mx:State name="detail">
        <!--
            <mx:SetProperty target="{contactControls}" name="visible" value="true"/>
            -->
        </mx:State>
    </mx:states>

    <mx:HBox left="10">
        <mx:VBox>
            <mx:Button id="addContact" icon="@Embed(source='/assets/images/address_book_add.png')" label="Add Contact"
                       click="addContactPopupAction()"/>
            <mx:DataGrid dataProvider="{contactModel.contacts}" itemClick="showContactDetails(event)" width="150"
                         height="300">
                <mx:columns>
                    <mx:DataGridColumn dataField="name" headerText="Name"/>
                </mx:columns>
            </mx:DataGrid>
        </mx:VBox>
        <mx:VBox id="contactControls" visible="false" visible.detail="true">
            <mx:HBox>
                <mx:Button id="editContact" icon="@Embed(source='/assets/images/address_book_edit.png')"
                           label="Edit Contact" click="changeContactPopupAction()"/>
                <mx:Button id="deleteContact" icon="@Embed(source='/assets/images/address_book_delete.png')"
                           label="Delete Contact" click="removeContactPopupAction()"/>
            </mx:HBox>
            <mx:HBox>
                <mx:DataGrid dataProvider="{contactModel.selectedContact.addresses}" id="addressDetailsGrid">
                    <mx:columns>
                        <mx:DataGridColumn dataField="type"/>
                        <mx:DataGridColumn dataField="street"/>
                        <mx:DataGridColumn dataField="zipCode"/>
                        <mx:DataGridColumn dataField="city"/>
                    </mx:columns>
                </mx:DataGrid>
                <mx:VBox>
                    <mx:Button id="addAddressButton" icon="@Embed(source='/assets/images/icon_add.png')"
                               label="Add address" click="addAddressPopupAction()" width="125"/>
                    <mx:Button id="deleteAddressButton" icon="@Embed(source='/assets/images/icon_delete.png')"
                               label="Delete address" width="125" click="removeAddressPopupAction()"/>
                    <mx:Button id="editAddressButton" icon="@Embed(source='/assets/images/icon_edit.png')"
                               label="Edit address" width="125" click="updateAddressPopupAction()"/>
                </mx:VBox>
            </mx:HBox>
        </mx:VBox>
    </mx:HBox>

</mx:Canvas>
